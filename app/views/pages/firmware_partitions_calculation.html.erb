<article class="calculator">
  <header>
    <h2><%= t('.title') %></h2>
  </header>

  <p>
    <%= button_tag "Lite", data: { flavor: 'lite' }, class: 'btn btn-primary preset', style: 'min-width:10rem' %>
    <%= button_tag "Ultimate", data: { flavor: 'ultimate' }, class: 'btn btn-primary preset', style: 'min-width:10rem' %>
  </p>

  <div class="row row-cols-1 row-cols-md-5">
    <div class="col">
      <div class="form-floating mb-3">
        <input type="text" class="form-control" id="mtddevice" value="">
        <label class="form-label" for="mtddevice"><%= t('.mtd_name') %></label>
      </div>
    </div>
    <div class="col">
      <div class="form-floating hex mb-3">
        <input name="flash_size" id="flash_size" class="form-control" value="">
        <label class="form-label" for="flash_size"><%= t('.flash_size_mb') %></label>
      </div>
    </div>
    <div class="col">
      <div class="form-floating hex mb-3">
        <input type="text" class="form-control hex start" id="offset" value="0">
        <label class="form-label" for="offset"><%= t('.offset') %></label>
      </div>
    </div>
    <div class="col"></div>
    <div class="col">
      <button type="button" class="btn btn-primary mb-3" id="recalculate"><%= t('.recalculate') %></button>
    </div>
  </div>
  <% (1..8).each do |i| %>
    <div class="row row-cols-1 row-cols-lg-5 partition" data-number="<%= i %>">
      <div class="col mb-3 name">
        <div class="form-floating">
          <input type="text" class="form-control border-color" data-color="<%= i %>" id="p<%= i %>name" value="">
          <label class="form-label" for="p<%= i %>name"><%= t('.partition_name', number: i) %></label>
        </div>
      </div>
      <div class="col mb-3">
        <div class="form-floating size dec">
          <input type="text" class="form-control" id="p<%= i %>size" value="">
          <label class="form-label" for="p<%= i %>size"><%= t('.partition_size', number: i) %></label>
        </div>
      </div>
      <div class="col mb-3 start hex">
        <div class="form-floating">
          <input type="text" class="form-control" id="s<%= i %>" readonly>
          <label class="form-label" for="s<%= i %>"><%= t('.start_address') %></label>
        </div>
      </div>
      <div class="col mb-3">
        <div class="form-floating size hex">
          <input type="text" class="form-control" id="h<%= i %>" readonly>
          <label class="form-label" for="h<%= i %>"><%= t('.size_hex') %></label>
        </div>
      </div>
      <div class="col mb-3 end hex">
        <div class="form-floating">
          <input type="text" class="form-control" id="e<%= i %>" readonly>
          <label for="e<%= i %>"><%= t('.end_address') %></label>
        </div>
      </div>
    </div>
  <% end %>

  <div class="progress mb-4 w-100">
    <% (0..8).each do |i| %>
      <div class="progress-bar" data-color="<%= i %>" id="pbp<%= i %>" role="progressbar" aria-valuenow="" aria-valuemin="0" aria-valuemax="100"></div>
    <% end %>
  </div>

  <div id="mtdparts" class="alert alert-info text-center"></div>

  <script>
      const Palette = ['#000000', '#ff6961', '#ffb480', '#f8f38d', '#42d6a4', '#08cad1', '#59adf6', '#9d94ff', '#c780e8'];
      const Partitioning = {
        'lite': {
          'sizemb': 8,
          'partitions': [
            { 'name': 'boot', 'sizekb': '256' },
            { 'name': 'env', 'sizekb': '64' },
            { 'name': 'kernel', 'sizekb': '2048' },
            { 'name': 'rootfs', 'sizekb': '5120' },
            { 'name': 'rootfs_data', 'sizekb': '-' }
        ]},
        'ultimate': {
          'sizemb': 16,
          'partitions': [
            { 'name': 'boot', 'sizekb': '256' },
            { 'name': 'env', 'sizekb': '64' },
            { 'name': 'kernel', 'sizekb': '3072' },
            { 'name': 'rootfs', 'sizekb': '10240' },
            { 'name': 'rootfs_data', 'sizekb': '-' }
        ]}
      }

      function populate(ev) {
        const p = Partitioning[ev.target.dataset.flavor];
        document.querySelector('#flash_size').value = p.sizemb;
        p.partitions.forEach((i, x) => {
          document.querySelector('#p'+(x+1)+'name').value = i.name;
          document.querySelector('#p'+(x+1)+'size').value = i.sizekb;
        });
        recalculate();
      }

      function recalculate() {
          const elOffset = document.querySelector('input#offset');
          const offset = elOffset.value;
          let hexOffset;
          let decOffset;

          if (offset.startsWith('0x')) {
              hexOffset = offset;
              decOffset = hexOffset.toString(10) / 1;
          } else {
              decOffset = parseInt(offset);
              hexOffset = '0x' + decOffset.toString(16).toUpperCase();
          }
          elOffset.value = (isNaN(hexOffset)) ? '0x0' : hexOffset;

          const valid_mtd_names = <%= raw mtd_names.to_a %>;

          let mtdparts = "mtdparts=sfc:";
          const mtddevice = document.querySelector('#mtddevice').value;
          mtdparts = mtddevice + ':';

          const flFullSizeDec = document.querySelector('input#flash_size').value * 1024 * 1024;
          const pbFullWidth = document.querySelector('.progress').clientWidth;
          let firstEmpty = 0;

          document.querySelector('#pbp0').style.width = (decOffset / flFullSizeDec * pbFullWidth) + 'px';

          document.querySelectorAll('div.partition').forEach(row => {
              const n = parseInt(row.dataset.number);

              const elSizeDec = document.querySelector('div[data-number="' + n + '"] div.size.dec input')
              const elSizeHex = document.querySelector('div[data-number="' + n + '"] div.size.hex input')
              const elAddrStart = document.querySelector('div[data-number="' + n + '"] div.start input')
              const elAddrEnd = document.querySelector('div[data-number="' + n + '"] div.end input')

              // reset hex values
              document.querySelectorAll('div[data-number="' + n + '"] div.hex input').forEach(el => el.value = "");

              // size
              let decSize;
              if (elSizeDec.value === '-') {
                  mtdparts += '-(' + document.querySelector('#p' + n + 'name').value + ')';
                  decSize = flFullSizeDec - firstEmpty;
              } else {
                  decSize = parseInt(elSizeDec.value) * 1024;
                  firstEmpty += decSize;
                  if (isNaN(decSize)) return;
                  let hexSize = '0x' + decSize.toString(16).toUpperCase();
                  elSizeHex.value = (isNaN(hexSize)) ? '' : hexSize;
                  mtdparts += decSize / 1024 + 'k(' + document.querySelector('#p' + n + 'name').value + '),';
              }

              // start
              let decStart = decOffset;
              for (let i = 1; i < n; i++) {
                  let s = document.querySelector('div[data-number="' + i + '"] div.size.dec input');
                  decStart += parseInt(s.value) * 1024;
              }
              let hexStart = '0x' + decStart.toString(16).toUpperCase();
              elAddrStart.value = (isNaN(hexStart)) ? '' : hexStart;

              // end
              let decEnd = decStart + decSize - 1;
              let hexEnd = '0x' + decEnd.toString(16).toUpperCase();
              elAddrEnd.value = (isNaN(hexEnd)) ? '' : hexEnd;

              document.querySelector('#pbp' + n).style.width = (decSize / flFullSizeDec * pbFullWidth) + 'px';
          });

          if (mtddevice === "") {
              document.querySelector('#mtdparts').textContent = "Please enter MTD device name to generate mtdparts string";
              document.querySelector('#mtddevice').focus();
          } else if (valid_mtd_names.includes(mtddevice)) {
              document.querySelector('#mtdparts').textContent = mtdparts;
          } else {
              document.querySelector('#mtdparts').innerHTML = "<b>Unknown MTD device name " + mtddevice + "!</b><br>Valid values are: <%= mtd_names.join(', ') %>.";
              document.querySelector('#mtddevice').focus();
          }
      }

      function initPage() {
          document.querySelectorAll('button.preset').forEach(el => el.addEventListener('click', populate));
          document.querySelector('button#recalculate').addEventListener('click', recalculate);
          document.querySelectorAll('input').forEach(el => {
              el.addEventListener('focus', evt => { evt.preventDefault(); evt.target.select(); });
              el.addEventListener('change', recalculate);
          });
          document.querySelectorAll('input[readonly]').forEach(el => el.tabIndex = -1);
          document.querySelectorAll('input[data-color]').forEach(el => el.style.borderColor = Palette[el.dataset['color']]);
          document.querySelectorAll('div[data-color]').forEach(el => el.style.backgroundColor = Palette[el.dataset['color']]);
          recalculate();
      }

      window.addEventListener('load', initPage);
  </script>
</article>
